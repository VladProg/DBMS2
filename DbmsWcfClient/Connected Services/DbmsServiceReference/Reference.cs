//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DbmsWcfClient.DbmsServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BigInteger", Namespace="http://schemas.datacontract.org/2004/07/System.Numerics")]
    [System.SerializableAttribute()]
    public partial struct BigInteger : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private uint[] _bitsField;
        
        private int _signField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint[] _bits {
            get {
                return this._bitsField;
            }
            set {
                if ((object.ReferenceEquals(this._bitsField, value) != true)) {
                    this._bitsField = value;
                    this.RaisePropertyChanged("_bits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _sign {
            get {
                return this._signField;
            }
            set {
                if ((this._signField.Equals(value) != true)) {
                    this._signField = value;
                    this.RaisePropertyChanged("_sign");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DbmsServiceReference.IDbmsService")]
    public interface IDbmsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/CreateDatabase", ReplyAction="http://tempuri.org/IDbmsService/CreateDatabaseResponse")]
        void CreateDatabase(string dbName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/CreateDatabase", ReplyAction="http://tempuri.org/IDbmsService/CreateDatabaseResponse")]
        System.Threading.Tasks.Task CreateDatabaseAsync(string dbName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/GetDatabase", ReplyAction="http://tempuri.org/IDbmsService/GetDatabaseResponse")]
        DbmsWcfService.Models.DatabaseInfo GetDatabase(string dbName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/GetDatabase", ReplyAction="http://tempuri.org/IDbmsService/GetDatabaseResponse")]
        System.Threading.Tasks.Task<DbmsWcfService.Models.DatabaseInfo> GetDatabaseAsync(string dbName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/DeleteDatabase", ReplyAction="http://tempuri.org/IDbmsService/DeleteDatabaseResponse")]
        void DeleteDatabase(string dbName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/DeleteDatabase", ReplyAction="http://tempuri.org/IDbmsService/DeleteDatabaseResponse")]
        System.Threading.Tasks.Task DeleteDatabaseAsync(string dbName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/AddTable", ReplyAction="http://tempuri.org/IDbmsService/AddTableResponse")]
        int AddTable(string dbName, string tableName, DbmsWcfService.Models.Column[] columns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/AddTable", ReplyAction="http://tempuri.org/IDbmsService/AddTableResponse")]
        System.Threading.Tasks.Task<int> AddTableAsync(string dbName, string tableName, DbmsWcfService.Models.Column[] columns);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/RemoveTable", ReplyAction="http://tempuri.org/IDbmsService/RemoveTableResponse")]
        void RemoveTable(string dbName, int tableid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/RemoveTable", ReplyAction="http://tempuri.org/IDbmsService/RemoveTableResponse")]
        System.Threading.Tasks.Task RemoveTableAsync(string dbName, int tableid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/GetTable", ReplyAction="http://tempuri.org/IDbmsService/GetTableResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DbmsWcfService.Models.TableDifference))]
        DbmsWcfService.Models.Table GetTable(string dbName, int tableId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/GetTable", ReplyAction="http://tempuri.org/IDbmsService/GetTableResponse")]
        System.Threading.Tasks.Task<DbmsWcfService.Models.Table> GetTableAsync(string dbName, int tableId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/AddRow", ReplyAction="http://tempuri.org/IDbmsService/AddRowResponse")]
        int AddRow(string dbName, int tableId, string[] cells);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/AddRow", ReplyAction="http://tempuri.org/IDbmsService/AddRowResponse")]
        System.Threading.Tasks.Task<int> AddRowAsync(string dbName, int tableId, string[] cells);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/RemoveRow", ReplyAction="http://tempuri.org/IDbmsService/RemoveRowResponse")]
        void RemoveRow(string dbName, int tableId, int rowId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/RemoveRow", ReplyAction="http://tempuri.org/IDbmsService/RemoveRowResponse")]
        System.Threading.Tasks.Task RemoveRowAsync(string dbName, int tableId, int rowId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/ValidateCell", ReplyAction="http://tempuri.org/IDbmsService/ValidateCellResponse")]
        void ValidateCell(string dbName, int tableId, int columnId, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/ValidateCell", ReplyAction="http://tempuri.org/IDbmsService/ValidateCellResponse")]
        System.Threading.Tasks.Task ValidateCellAsync(string dbName, int tableId, int columnId, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/UpdateCell", ReplyAction="http://tempuri.org/IDbmsService/UpdateCellResponse")]
        void UpdateCell(string dbName, int tableId, int rowId, int columnId, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/UpdateCell", ReplyAction="http://tempuri.org/IDbmsService/UpdateCellResponse")]
        System.Threading.Tasks.Task UpdateCellAsync(string dbName, int tableId, int rowId, int columnId, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/GetTableDifference", ReplyAction="http://tempuri.org/IDbmsService/GetTableDifferenceResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DbmsWcfService.Models.TableDifference))]
        DbmsWcfService.Models.Table GetTableDifference(string dbName, int leftTableId, int rightTableId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/GetTableDifference", ReplyAction="http://tempuri.org/IDbmsService/GetTableDifferenceResponse")]
        System.Threading.Tasks.Task<DbmsWcfService.Models.Table> GetTableDifferenceAsync(string dbName, int leftTableId, int rightTableId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/TableExists", ReplyAction="http://tempuri.org/IDbmsService/TableExistsResponse")]
        bool TableExists(string dbName, int tableId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDbmsService/TableExists", ReplyAction="http://tempuri.org/IDbmsService/TableExistsResponse")]
        System.Threading.Tasks.Task<bool> TableExistsAsync(string dbName, int tableId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDbmsServiceChannel : DbmsWcfClient.DbmsServiceReference.IDbmsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DbmsServiceClient : System.ServiceModel.ClientBase<DbmsWcfClient.DbmsServiceReference.IDbmsService>, DbmsWcfClient.DbmsServiceReference.IDbmsService {
        
        public DbmsServiceClient() {
        }
        
        public DbmsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DbmsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DbmsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DbmsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void CreateDatabase(string dbName) {
            base.Channel.CreateDatabase(dbName);
        }
        
        public System.Threading.Tasks.Task CreateDatabaseAsync(string dbName) {
            return base.Channel.CreateDatabaseAsync(dbName);
        }
        
        public DbmsWcfService.Models.DatabaseInfo GetDatabase(string dbName) {
            return base.Channel.GetDatabase(dbName);
        }
        
        public System.Threading.Tasks.Task<DbmsWcfService.Models.DatabaseInfo> GetDatabaseAsync(string dbName) {
            return base.Channel.GetDatabaseAsync(dbName);
        }
        
        public void DeleteDatabase(string dbName) {
            base.Channel.DeleteDatabase(dbName);
        }
        
        public System.Threading.Tasks.Task DeleteDatabaseAsync(string dbName) {
            return base.Channel.DeleteDatabaseAsync(dbName);
        }
        
        public int AddTable(string dbName, string tableName, DbmsWcfService.Models.Column[] columns) {
            return base.Channel.AddTable(dbName, tableName, columns);
        }
        
        public System.Threading.Tasks.Task<int> AddTableAsync(string dbName, string tableName, DbmsWcfService.Models.Column[] columns) {
            return base.Channel.AddTableAsync(dbName, tableName, columns);
        }
        
        public void RemoveTable(string dbName, int tableid) {
            base.Channel.RemoveTable(dbName, tableid);
        }
        
        public System.Threading.Tasks.Task RemoveTableAsync(string dbName, int tableid) {
            return base.Channel.RemoveTableAsync(dbName, tableid);
        }
        
        public DbmsWcfService.Models.Table GetTable(string dbName, int tableId) {
            return base.Channel.GetTable(dbName, tableId);
        }
        
        public System.Threading.Tasks.Task<DbmsWcfService.Models.Table> GetTableAsync(string dbName, int tableId) {
            return base.Channel.GetTableAsync(dbName, tableId);
        }
        
        public int AddRow(string dbName, int tableId, string[] cells) {
            return base.Channel.AddRow(dbName, tableId, cells);
        }
        
        public System.Threading.Tasks.Task<int> AddRowAsync(string dbName, int tableId, string[] cells) {
            return base.Channel.AddRowAsync(dbName, tableId, cells);
        }
        
        public void RemoveRow(string dbName, int tableId, int rowId) {
            base.Channel.RemoveRow(dbName, tableId, rowId);
        }
        
        public System.Threading.Tasks.Task RemoveRowAsync(string dbName, int tableId, int rowId) {
            return base.Channel.RemoveRowAsync(dbName, tableId, rowId);
        }
        
        public void ValidateCell(string dbName, int tableId, int columnId, string value) {
            base.Channel.ValidateCell(dbName, tableId, columnId, value);
        }
        
        public System.Threading.Tasks.Task ValidateCellAsync(string dbName, int tableId, int columnId, string value) {
            return base.Channel.ValidateCellAsync(dbName, tableId, columnId, value);
        }
        
        public void UpdateCell(string dbName, int tableId, int rowId, int columnId, string value) {
            base.Channel.UpdateCell(dbName, tableId, rowId, columnId, value);
        }
        
        public System.Threading.Tasks.Task UpdateCellAsync(string dbName, int tableId, int rowId, int columnId, string value) {
            return base.Channel.UpdateCellAsync(dbName, tableId, rowId, columnId, value);
        }
        
        public DbmsWcfService.Models.Table GetTableDifference(string dbName, int leftTableId, int rightTableId) {
            return base.Channel.GetTableDifference(dbName, leftTableId, rightTableId);
        }
        
        public System.Threading.Tasks.Task<DbmsWcfService.Models.Table> GetTableDifferenceAsync(string dbName, int leftTableId, int rightTableId) {
            return base.Channel.GetTableDifferenceAsync(dbName, leftTableId, rightTableId);
        }
        
        public bool TableExists(string dbName, int tableId) {
            return base.Channel.TableExists(dbName, tableId);
        }
        
        public System.Threading.Tasks.Task<bool> TableExistsAsync(string dbName, int tableId) {
            return base.Channel.TableExistsAsync(dbName, tableId);
        }
    }
}
